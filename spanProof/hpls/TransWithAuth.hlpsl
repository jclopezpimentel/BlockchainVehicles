role role_C(C:agent,W:agent,QR:text,Kw:symmetric_key,Ncw:text,O:text,Op:hash_func,Kc:symmetric_key,SND,RCV:channel(dy))
played_by C
def=
	local
		State:nat,Kpc:public_key,T:hash_func,R:hash_func
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ Kpc':=new() /\ secret(Op',sec_1,{C,W}) /\ SND({C.Op(QR.O.Ncw).{Op(QR.O.Ncw)}_Kpc'}_Kc)
		4. State=1 /\ RCV({C.R(T(C.O.{O}_Kpc)).Ncw}_Kc) =|> State':=2 /\ secret(T',sec_2,{W,M})
end role

role role_W(C:agent,W:agent,Kc:symmetric_key,Kw:symmetric_key,T:hash_func,B:hash_func,R:hash_func,SND,RCV:channel(dy))
played_by W
def=
	local
		State:nat,QR:text,Op:hash_func,Nw:text,Kpc:public_key,O:text,Ncw:text
	init
		State := 0
	transition
		1. State=0 /\ RCV({C.Op(QR'.O'.Ncw').{Op(QR'.O'.Ncw')}_Kpc'}_Kc) =|> State':=1 /\ secret(Op',sec_1,{C,W}) /\ Nw':=new() /\ secret(T',sec_2,{W,M}) /\ SND({C.T(C.O'.{O'}_Kpc').Nw'}_Kw)
		3. State=1 /\ RCV({C.B(T(C.O.{O}_Kpc))}_Kw) =|> State':=2 /\ secret(B',sec_3,{W,M}) /\ secret(T',sec_2,{W,M}) /\ SND({C.R(T(C.O.{O}_Kpc)).Ncw}_Kc)
end role

role role_M(M:agent,B:hash_func,SND,RCV:channel(dy))
played_by M
def=
	local
		State:nat,Nw:text,Kw:symmetric_key,T:hash_func,C:agent,O:text,Kpc:public_key
	init
		State := 0
	transition
		2. State=0 /\ RCV({C'.T(C'.O'.{O'}_Kpc').Nw'}_Kw') =|> State':=1 /\ secret(T',sec_2,{W,M}) /\ secret(B',sec_3,{W,M}) /\ SND({C'.B(T(C'.O'.{O'}_Kpc'))}_Kw')
end role

role session1(R:hash_func,T:hash_func,Kw:symmetric_key,Kc:symmetric_key,W:agent,C:agent,QR:text,Ncw:text,O:text,Op:hash_func,M:agent,B:hash_func)
def=
	local
		SND3,RCV3,SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_M(M,B,SND3,RCV3) /\ role_W(C,W,Kc,Kw,T,B,R,SND2,RCV2) /\ role_C(C,W,QR,Kw,Ncw,O,Op,Kc,SND1,RCV1)
end role

role session2(R:hash_func,T:hash_func,Kw:symmetric_key,Kc:symmetric_key,W:agent,C:agent,QR:text,Ncw:text,O:text,Op:hash_func,M:agent,B:hash_func)
def=
	local
		SND3,RCV3,SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_M(M,B,SND3,RCV3) /\ role_W(C,W,Kc,Kw,T,B,R,SND2,RCV2) /\ role_C(C,W,QR,Kw,Ncw,O,Op,Kc,SND1,RCV1)
end role

role session3(R:hash_func,T:hash_func,Kw:symmetric_key,Kc:symmetric_key,W:agent,C:agent,QR:text,Ncw:text,O:text,Op:hash_func,M:agent,B:hash_func)
def=
	local
		SND3,RCV3,SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_M(M,B,SND3,RCV3) /\ role_W(C,W,Kc,Kw,T,B,R,SND2,RCV2) /\ role_C(C,W,QR,Kw,Ncw,O,Op,Kc,SND1,RCV1)
end role

role environment()
def=
	const
		miner:agent,o:text,qr:text,kc:symmetric_key,t:hash_func,client:agent,hash_0:hash_func,r:hash_func,kw:symmetric_key,wallet:agent,ncw:text,op:hash_func,b:hash_func,sec_1:protocol_id,sec_2:protocol_id,sec_3:protocol_id
	intruder_knowledge = {client,wallet,miner}
	composition
		session3(r,t,kw,kc,wallet,i,qr,ncw,o,op,miner,b) /\ session2(r,t,kw,kc,i,client,qr,ncw,o,op,miner,b) /\ session1(r,t,kw,kc,wallet,client,qr,ncw,o,op,miner,b)
end role

goal
	secrecy_of sec_1
	secrecy_of sec_2
	secrecy_of sec_3
end goal

environment()
