role role_C(C:agent,W:agent,QR:text,Kc:symmetric_key,SND,RCV:channel(dy))
played_by C
def=
	local
		State:nat,F:hash_func,N:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ N':=new() /\ secret(N',sec_1,{C,W}) /\ SND({C.QR.N'}_Kc)
		2. State=1 /\ RCV({C.F(QR.N)}_Kc) =|> State':=2 /\ secret(N',sec_1,{C,W})
end role

role role_W(W:agent,Kc:symmetric_key,SND,RCV:channel(dy))
played_by W
def=
	local
		State:nat,C:agent,F:hash_func,QR:text,N:text
	init
		State := 0
	transition
		1. State=0 /\ RCV({C'.QR'.N'}_Kc) =|> State':=1 /\ secret(N',sec_1,{C,W}) /\ SND({C'.F(QR'.N')}_Kc)
end role

role session1(QR:text,C:agent,W:agent,Kc:symmetric_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_W(W,Kc,SND2,RCV2) /\ role_C(C,W,QR,Kc,SND1,RCV1)
end role

role session2(QR:text,C:agent,W:agent,Kc:symmetric_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_W(W,Kc,SND2,RCV2) /\ role_C(C,W,QR,Kc,SND1,RCV1)
end role

role session3(QR:text,C:agent,W:agent,Kc:symmetric_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_W(W,Kc,SND2,RCV2) /\ role_C(C,W,QR,Kc,SND1,RCV1)
end role

role environment()
def=
	const
		miner:agent,hash_0:hash_func,client:agent,qr:text,kc:symmetric_key,sec_1:protocol_id
	intruder_knowledge = {client,miner}
	composition
		session3(qr,i,miner,kc) /\ session2(qr,client,i,kc) /\ session1(qr,client,miner,kc)
end role

goal
	secrecy_of sec_1
end goal

environment()
