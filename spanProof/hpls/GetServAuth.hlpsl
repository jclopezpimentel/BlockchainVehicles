role role_C(C:agent,W:agent,QR:text,Kc:symmetric_key,Y:text,SND,RCV:channel(dy))
played_by C
def=
	local
		State:nat,N:text,F:hash_func
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ secret(Y',sec_2,{C,W}) /\ N':=new() /\ secret(N',sec_1,{C,W}) /\ SND({C.QR.N'.Y}_Kc)
		2. State=1 /\ RCV({C.F(QR.N).Y}_Kc) =|> State':=2 /\ secret(Y',sec_2,{C,W}) /\ secret(N',sec_1,{C,W})
end role

role role_W(C:agent,W:agent,Kc:symmetric_key,SND,RCV:channel(dy))
played_by W
def=
	local
		State:nat,N:text,QR:text,F:hash_func,Y:text
	init
		State := 0
	transition
		1. State=0 /\ RCV({C.QR'.N'.Y'}_Kc) =|> State':=1 /\ secret(Y',sec_2,{C,W}) /\ secret(N',sec_1,{C,W}) /\ SND({C.F(QR'.N').Y'}_Kc)
end role

role session1(Y:text,QR:text,C:agent,W:agent,Kc:symmetric_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_W(C,W,Kc,SND2,RCV2) /\ role_C(C,W,QR,Kc,Y,SND1,RCV1)
end role

role session2(Y:text,QR:text,C:agent,W:agent,Kc:symmetric_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_W(C,W,Kc,SND2,RCV2) /\ role_C(C,W,QR,Kc,Y,SND1,RCV1)
end role

role session3(Y:text,QR:text,C:agent,W:agent,Kc:symmetric_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_W(C,W,Kc,SND2,RCV2) /\ role_C(C,W,QR,Kc,Y,SND1,RCV1)
end role

role environment()
def=
	const
		miner:agent,y:text,client:agent,hash_0:hash_func,qr:text,kc:symmetric_key,sec_1:protocol_id,sec_2:protocol_id
	intruder_knowledge = {client,miner}
	composition
		session3(y,qr,i,miner,kc) /\ session2(y,qr,client,i,kc) /\ session1(y,qr,client,miner,kc)
end role

goal
	secrecy_of sec_1
	secrecy_of sec_2
end goal

environment()
